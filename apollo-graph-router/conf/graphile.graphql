schema {
  query: Query
  mutation: Mutation
}
"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR
"The root query type which gives access points into the data universe."
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  "The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."
  nodeId: ID!
  "Fetches an object given its globally unique `ID`."
  node("The globally unique `ID`." nodeId: ID!): Node
  "Reads and enables pagination through a set of `Post`."
  allPosts("Only read the first `n` values of the set." first: Int, "Only read the last `n` values of the set." last: Int, """
Skip the first `n` values from our `after` cursor, an alternative to cursor
based pagination. May not be used with `last`.
""" offset: Int, "Read all values in the set before (above) this cursor." before: Cursor, "Read all values in the set after (below) this cursor." after: Cursor, "The method to use when ordering `Post`." orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC], "A condition to be used in determining which values should be returned by the collection." condition: PostCondition): PostsConnection
  "Reads and enables pagination through a set of `User`."
  allUsers("Only read the first `n` values of the set." first: Int, "Only read the last `n` values of the set." last: Int, """
Skip the first `n` values from our `after` cursor, an alternative to cursor
based pagination. May not be used with `last`.
""" offset: Int, "Read all values in the set before (above) this cursor." before: Cursor, "Read all values in the set after (below) this cursor." after: Cursor, "The method to use when ordering `User`." orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC], "A condition to be used in determining which values should be returned by the collection." condition: UserCondition): UsersConnection
  postById(id: UUID!): Post
  userById(id: UUID!): User
  "Reads a single `Post` using its globally unique `ID`."
  post("The globally unique `ID` to be used in selecting a single `Post`." nodeId: ID!): Post
  "Reads a single `User` using its globally unique `ID`."
  user("The globally unique `ID` to be used in selecting a single `User`." nodeId: ID!): User
}
"An object with a globally unique `ID`."
interface Node {
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}
"A connection to a list of `Post` values."
type PostsConnection {
  "A list of `Post` objects."
  nodes: [Post]!
  "A list of edges which contains the `Post` and cursor to aid in pagination."
  edges: [PostsEdge!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `Post` you could get from the connection."
  totalCount: Int!
}
"Forum posts written by a user."
type Post implements Node {
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  id: UUID!
  title: String
  body: String
  createdDate: Datetime
  authorId: UUID!
  "Reads a single `User` that is related to this `Post`."
  userByAuthorId: User
}
"A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122)."
scalar UUID
"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime
"Forum users."
type User implements Node {
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  id: UUID!
  username: String
  createdDate: Datetime
  "Reads and enables pagination through a set of `Post`."
  postsByAuthorId("Only read the first `n` values of the set." first: Int, "Only read the last `n` values of the set." last: Int, """
Skip the first `n` values from our `after` cursor, an alternative to cursor
based pagination. May not be used with `last`.
""" offset: Int, "Read all values in the set before (above) this cursor." before: Cursor, "Read all values in the set after (below) this cursor." after: Cursor, "The method to use when ordering `Post`." orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC], "A condition to be used in determining which values should be returned by the collection." condition: PostCondition): PostsConnection!
}
"A location in a connection that can be used for resuming pagination."
scalar Cursor
"Methods to use when ordering `Post`."
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  BODY_ASC
  BODY_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’"
input PostCondition {
  "Checks for equality with the object’s `id` field."
  id: UUID
  "Checks for equality with the object’s `title` field."
  title: String
  "Checks for equality with the object’s `body` field."
  body: String
  "Checks for equality with the object’s `createdDate` field."
  createdDate: Datetime
  "Checks for equality with the object’s `authorId` field."
  authorId: UUID
}
"A `Post` edge in the connection."
type PostsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `Post` at the end of the edge."
  node: Post
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: Cursor
  "When paginating forwards, the cursor to continue."
  endCursor: Cursor
}
"A connection to a list of `User` values."
type UsersConnection {
  "A list of `User` objects."
  nodes: [User]!
  "A list of edges which contains the `User` and cursor to aid in pagination."
  edges: [UsersEdge!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `User` you could get from the connection."
  totalCount: Int!
}
"A `User` edge in the connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `User` at the end of the edge."
  node: User
}
"Methods to use when ordering `User`."
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’"
input UserCondition {
  "Checks for equality with the object’s `id` field."
  id: UUID
  "Checks for equality with the object’s `username` field."
  username: String
  "Checks for equality with the object’s `createdDate` field."
  createdDate: Datetime
}
"The root mutation type which contains root level fields which mutate data."
type Mutation {
  "Creates a single `Post`."
  createPost("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: CreatePostInput!): CreatePostPayload
  "Creates a single `User`."
  createUser("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: CreateUserInput!): CreateUserPayload
  "Updates a single `Post` using its globally unique id and a patch."
  updatePost("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: UpdatePostInput!): UpdatePostPayload
  "Updates a single `Post` using a unique key and a patch."
  updatePostById("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: UpdatePostByIdInput!): UpdatePostPayload
  "Updates a single `User` using its globally unique id and a patch."
  updateUser("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: UpdateUserInput!): UpdateUserPayload
  "Updates a single `User` using a unique key and a patch."
  updateUserById("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: UpdateUserByIdInput!): UpdateUserPayload
  "Deletes a single `Post` using its globally unique id."
  deletePost("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: DeletePostInput!): DeletePostPayload
  "Deletes a single `Post` using a unique key."
  deletePostById("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: DeletePostByIdInput!): DeletePostPayload
  "Deletes a single `User` using its globally unique id."
  deleteUser("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: DeleteUserInput!): DeleteUserPayload
  "Deletes a single `User` using a unique key."
  deleteUserById("The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields." input: DeleteUserByIdInput!): DeleteUserPayload
}
"The output of our create `Post` mutation."
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `Post` that was created by this mutation."
  post: Post
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "Reads a single `User` that is related to this `Post`."
  userByAuthorId: User
  "An edge for our `Post`. May be used by Relay 1."
  postEdge("The method to use when ordering `Post`." orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]): PostsEdge
}
"All input for the create `Post` mutation."
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `Post` to be created by this mutation."
  post: PostInput!
}
"An input for mutations affecting `Post`"
input PostInput {
  id: UUID
  title: String
  body: String
  createdDate: Datetime
  authorId: UUID!
}
"The output of our create `User` mutation."
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `User` that was created by this mutation."
  user: User
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "An edge for our `User`. May be used by Relay 1."
  userEdge("The method to use when ordering `User`." orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]): UsersEdge
}
"All input for the create `User` mutation."
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `User` to be created by this mutation."
  user: UserInput!
}
"An input for mutations affecting `User`"
input UserInput {
  id: UUID
  username: String
  createdDate: Datetime
}
"The output of our update `Post` mutation."
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `Post` that was updated by this mutation."
  post: Post
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "Reads a single `User` that is related to this `Post`."
  userByAuthorId: User
  "An edge for our `Post`. May be used by Relay 1."
  postEdge("The method to use when ordering `Post`." orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]): PostsEdge
}
"All input for the `updatePost` mutation."
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `Post` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `Post` being updated."
  postPatch: PostPatch!
}
"Represents an update to a `Post`. Fields that are set will be updated."
input PostPatch {
  id: UUID
  title: String
  body: String
  createdDate: Datetime
  authorId: UUID
}
"All input for the `updatePostById` mutation."
input UpdatePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "An object where the defined keys will be set on the `Post` being updated."
  postPatch: PostPatch!
  id: UUID!
}
"The output of our update `User` mutation."
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `User` that was updated by this mutation."
  user: User
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "An edge for our `User`. May be used by Relay 1."
  userEdge("The method to use when ordering `User`." orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]): UsersEdge
}
"All input for the `updateUser` mutation."
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `User` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `User` being updated."
  userPatch: UserPatch!
}
"Represents an update to a `User`. Fields that are set will be updated."
input UserPatch {
  id: UUID
  username: String
  createdDate: Datetime
}
"All input for the `updateUserById` mutation."
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "An object where the defined keys will be set on the `User` being updated."
  userPatch: UserPatch!
  id: UUID!
}
"The output of our delete `Post` mutation."
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `Post` that was deleted by this mutation."
  post: Post
  deletedPostId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "Reads a single `User` that is related to this `Post`."
  userByAuthorId: User
  "An edge for our `Post`. May be used by Relay 1."
  postEdge("The method to use when ordering `Post`." orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]): PostsEdge
}
"All input for the `deletePost` mutation."
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `Post` to be deleted."
  nodeId: ID!
}
"All input for the `deletePostById` mutation."
input DeletePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}
"The output of our delete `User` mutation."
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `User` that was deleted by this mutation."
  user: User
  deletedUserId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "An edge for our `User`. May be used by Relay 1."
  userEdge("The method to use when ordering `User`." orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]): UsersEdge
}
"All input for the `deleteUser` mutation."
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `User` to be deleted."
  nodeId: ID!
}
"All input for the `deleteUserById` mutation."
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

